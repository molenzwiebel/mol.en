class Environment {
    var vars: Hash<String, Object>
    var parent: Object

    def create(parent: Object) {
        @vars = new Hash<String, Object>
        @parent = parent
    }

    def extend() -> Environment {
        new Environment(this)
    }

    def find_first_env(name: String) -> Environment {
        scope = this
        for (, scope, ) {
            vars = scope.vars
            if (vars[name]) return scope
            scope = scope.parent as Environment
        }
        return null
    }

    def get(name: String) -> Object {
        val = @vars[name]
        if (val) return val
        return null
    }

    def set(name: String, value: Object) {
        scope = @find_first_env(name)
        if (scope.is_null() && @parent.is_null() == false) {
            return
        }

        if (scope.is_null()) scope = this
        scope_vars = scope.vars
        scope_vars[name] = value
    }

    def define(name: String, value: Object) {
        @vars[name] = value
    }
}
