
# The AST (Abstract Syntax Tree). Basically the internal representation of 
# any mol.en file. This tree is generated by the parser.
module Molen
    class ASTNode
    end

    class Expression < ASTNode
    end

    class Statement < ASTNode
    end

    class Expressions < Expression
        include Enumerable
        attr_accessor :expressions

        def self.from(obj)
            case obj
            when nil
                Expressions.new
            when Expressions
                obj
            when Array
                Expressions.new obj
            else
                Expressions.new [obj]
            end
        end

        def initialize(expressions = nil)
            @expressions = expressions
        end

        def each(&block)
            expressions.each &block
        end

        def <<(exp)
            @expressions << exp
        end

        def accept(visitor)
            if visitor.start_visit_expressions self
                expressions.each { |exp| exp.accept visitor }
            end
            visitor.end_visit_expressions self
        end
    end

    class Bool < Expression
        attr_accessor :value

        def initialize(val)
            @value = val
        end

        def accept(visitor)
            visitor.visit_bool self
        end
    end

    class Int < Expression
        attr_accessor :value

        def initialize(val)
            @value = val
        end

        def accept(visitor)
            visitor.visit_int self
        end
    end

    class Double < Expression
        attr_accessor :value

        def initialize(val)
            @value = val
        end

        def accept(visitor)
            visitor.visit_double self
        end
    end

    class String < Expression
        attr_accessor :value

        def initialize(val)
            @value = val
        end

        def accept(visitor)
            visitor.visit_string self
        end
    end
end