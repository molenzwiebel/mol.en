extern C {
    fn strlen(str: *Char) -> Int
    fn atoi(str: *Char) -> Int
    fn strncpy(s1: *Char, s2: *Char, n: Int) -> *Char
    fn strcmp(s1: *Char, s2: *Char) -> Int
}

class String {
    def create(ptr: *Char) {
        @value = ptr
    }

    def length() -> Int {
        C.strlen(@value)
    }

    def to_int() -> Int {
        C.atoi(@value)
    }

    def __index_get(index: Int) -> Char {
        CUtil.assert(index < @length(), "Cannot get char at index " + index + ", String is only " + @length() + " characters (ranging from 0 to " + (@length() - 1) + ")")
        (@value + index).value()
    }

    def __index_set(index: Int, val: String) {
        CUtil.assert(index < @length(), "Cannot set char at index " + index + ", String is only " + @length() + " characters (ranging from 0 to " + (@length() - 1) + ")")
        (@value + index).set_value(val[0])
    }

    def chars() -> Char[] {
        ret = new Char[]
        for (i = 0, i < @length(), i = i + 1)
            ret.add(this[i])
        ret
    }

    def cstr() -> *Char {
        @value
    }

    def substring(start: Int, count: Int) -> String {
        CUtil.assert(start >= 0, "Negative argument to String.substring")
        CUtil.assert(start + count <= @length(), "String.substring out of index")

        buffer = Pointer.malloc(Char, count + 1)
        C.strncpy(buffer, @value + start, count)
        (buffer + count).set_value(0.to_char())

        new String(buffer)
    }

    def __eq(other: String) -> Bool {
        C.strcmp(@value, other.cstr()) == 0
    }

    def __add(other: Int) -> String {
        this + other.to_s()
    }

    def __add(other: Object) -> String {
        this + other.to_s()
    }

    def hash() -> Int {
        @length()
    }
}
