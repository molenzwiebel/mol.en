struct C_Regex {
    var magic: Int
    var nsub: Long
    var endp: *Char
    var guts: *Char
}

struct C_RegexMatch {
    var start: Long
    var end: Long
}

extern C {
    fn regcomp(re: *C_Regex, str: *Char, flags: Int) -> Int
    fn regexec(re: *C_Regex, str: *Char, nmatch: Long, match: *C_RegexMatch, flags: Int) -> Int
    fn regerror(code: Int, re: *C_Regex, buffer: *Char, buffer_size: Int) -> Int
}

class Regex {
    var regex: C_Regex
    var source: String

    def create(src: String) {
        @source = src

        @regex = new C_Regex

        res = C.regcomp(&@regex, src.pointer, 1)
        if (res != 0) {
            buf = Pointer.malloc(sizeof Char * 100) as *Char
            C.regerror(res, &@regex, buf, 100)

            assert(false, "Error compiling regex '" + src + "': " + String.from_cstr(buf))
        }
    }

    def match(target: String) -> RegexMatch {
        @match(target, 0)
    }

    def match(target: String, start: Int) -> RegexMatch {
        num_captures = @regex.nsub + 1

        matches = Pointer.malloc(sizeof C_RegexMatch * num_captures.to_int()) as *C_RegexMatch
        res = C.regexec(&@regex, target.pointer + start, num_captures, matches, 0)

        if (res == 0) {
            return new RegexMatch(String.from_cstr(target.pointer + start), matches)
        } elseif (res == 1) {
            #return null
            return new RegexMatch("", matches)
        } else {
            buf = Pointer.malloc(sizeof Char * 100) as *Char
            C.regerror(res, &@regex, buf, 100)

            assert(false, "Error matching regex: " + String.from_cstr(buf))
            #return null
            return new RegexMatch("", matches)
        }
    }
}

class RegexMatch {
    var string: String
    var matches: *C_RegexMatch

    def create(string: String, matches: *C_RegexMatch) {
        @string = string
        @matches = matches
    }

    def match_at(index: Int) -> C_RegexMatch {
        (@matches + index).get()
    }

    def match_begin(match_num: Int) -> Long {
        @match_at(match_num).begin
    }

    def match_end(match_num: Int) -> Long {
        @match_at(match_num).end
    }

    def __index_get(index: Int) -> String {
        match = @match_at(index)
        @string.substring(match.start.to_int(), match.end.to_int() - match.start.to_int())
    }
}
