module Enumerable<Type> {
    class Array<E> {}

    def <RetType> map(fun: (Type) -> RetType) -> Array<RetType> {
        ret = new Array<RetType>
        @each() |el| {
            ret.add(fun.call(el))
        }
        ret
    }

    def select(fun: (Type) -> Bool) -> Array<Type> {
        ret = new Array<Type>
        @each() |el| {
            res = fun.call(el)
            if (res) ret.add(el)
        }
        ret
    }

    def join(sep: String) -> String {
        ret = ""
        ret_ptr = &ret
        index = 0
        index_ptr = &index
        @each() |el| {
            if (index_ptr.get() != 0) ret_ptr.set(ret_ptr.get() + sep)
            ret_ptr.set(ret_ptr.get() + el.to_s())
            index_ptr.set(index_ptr.get() + 1)
        }
        ret
    }
}
